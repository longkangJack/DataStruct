1.设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。


	
push(x) -- 将元素 x 推入栈中。
	pop() -- 删除栈顶的元素。
	
top() -- 获取栈顶元素。

	
typedef struct Stack
{
    int *base;
    int  top;
    int  capacity;
}Stack;
bool StackFull(Stack *pst)
{
    return pst->top >= pst->capacity;
}

bool StackEmpty(Stack *pst)
{
    return pst->top == 0;
}
Stack* StackCreate(int k)
{
    Stack *pst = (Stack*)malloc(sizeof(Stack));
    pst->capacity = k;
    pst->base = (int*)malloc(sizeof(int) * pst->capacity);
    pst->top = 0;
    return pst;
}
void StackFree(Stack *pst)
{
    free(pst->base);
    pst->base = NULL;
    pst->capacity = pst->top = 0;
}
void StackPush(Stack *pst, int x)
{
    if(StackFull(pst))
        return;
    pst->base[pst->top++] = x;
}
void StackPop(Stack *pst)
{
    if(StackEmpty(pst))
        return;
    pst->top--;    
}
int StackTop(Stack *pst)
{
    assert(pst->top != 0);
    return pst->base[pst->top-1];//创建队列 包含各种函数
}
////////////////////////////////////////////////////////////////////
typedef struct 
{   
    Stack *st;//队列
    Stack *min_st;//最小队列
} MinStack;
/** initialize your data structure here. */
MinStack* minStackCreate() 
{
    int n = 1000;
    MinStack *pst = (MinStack*)malloc(sizeof(MinStack));
    pst->st = StackCreate(n);
    pst->min_st = StackCreate(n);   
    return pst;
}
void minStackPush(MinStack* obj, int x) //入队
{
      StackPush(obj->st, x);
      if(StackEmpty(obj->min_st) || x<=StackTop(obj->min_st))
      {
          StackPush(obj->min_st, x);          
      }
}
void minStackPop(MinStack* obj) //出队
{
    int val = StackTop(obj->st);
    StackPop(obj->st);
    if(val == StackTop(obj->min_st))
    {
        StackPop(obj->min_st);
    }
}
int minStackTop(MinStack* obj) //看队顶元素
{
    return StackTop(obj->st);
}
int minStackGetMin(MinStack* obj) //得到最小队列
{
    return StackTop(obj->min_st);
}
void minStackFree(MinStack* obj) //释放空间
{
    free(obj->st);
    free(obj->min_st);
    free(obj);    
}
/**

 * Your MinStack struct will be instantiated and called as such:

 * MinStack* obj = minStackCreate();

 * minStackPush(obj, x);

 

 * minStackPop(obj);

 

 * int param_3 = minStackTop(obj);

 

 * int param_4 = minStackGetMin(obj);

 

 * minStackFree(obj);

*/
/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, x);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/
2.设计你的循环队列实现。 
循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。
它也被称为“环形缓冲器”。

循环队列的一个好处是我们可以利用这个队列之前用过的空间。
在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。
但是使用循环队列，我们能使用这些空间去存储新的值。

你的实现应该支持如下操作：


	
MyCircularQueue(k): 构造器，设置队列长度为 k 。
	
Front: 从队首获取元素。如果队列为空，返回 -1 。
	
Rear: 获取队尾元素。如果队列为空，返回 -1 。
	
enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。
	
deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。
	
isEmpty(): 检查循环队列是否为空。
	isFull(): 检查循环队列是否已满。


typedef struct {
    int *que;
    int front;
    int rear;
    int length;
} MyCircularQueue;//初始化队列

/** Initialize your data structure here. Set the size of the queue to be k. */
bool myCircularQueueIsEmpty(MyCircularQueue* obj);
bool myCircularQueueIsFull(MyCircularQueue* obj);
void myCircularQueueFree(MyCircularQueue* obj);

MyCircularQueue* myCircularQueueCreate(int k) {
    MyCircularQueue *q1;
    q1 = malloc(sizeof(MyCircularQueue));//我的循环队列
    q1->que = malloc(sizeof(int) * (k + 1));//申请空间
    q1->front = q1->rear = 0;
    q1->length = k + 1;
    return q1;
}

/** Insert an element into the circular queue. Return true if the operation is successful. */
bool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {
    if ((obj->rear + 1) % (obj->length) == obj->front)//入队列
        return false;
    else
    {
        obj->rear = (obj->rear + 1) % (obj->length);
        obj->que[obj->rear] = value;
        return true;
    }
}

/** Delete an element from the circular queue. Return true if the operation is successful. */
bool myCircularQueueDeQueue(MyCircularQueue* obj) {//出队列
    if (obj->rear == obj->front)//判断空
        return false;
    else
    {
        obj->front = (obj->front + 1) % (obj->length);
        return true;
    }
}

/** Get the front item from the queue. */
int myCircularQueueFront(MyCircularQueue* obj) {
    if (obj->rear == obj->front)
        return -1;
    return obj->que[(obj->front + 1) % obj->length];
    
}

/** Get the last item from the queue. */
int myCircularQueueRear(MyCircularQueue* obj) {
    if (obj->rear == obj->front)
        return -1;
    return obj->que[obj->rear];
}

/** Checks whether the circular queue is empty or not. */
bool myCircularQueueIsEmpty(MyCircularQueue* obj) {
    if (obj->rear == obj->front)
        return true;
    return false;
}

/** Checks whether the circular queue is full or not. */
bool myCircularQueueIsFull(MyCircularQueue* obj) {
    if ((obj->rear + 1) % (obj->length) == obj->front)
        return true;
    return false;
}

void myCircularQueueFree(MyCircularQueue* obj) {
    int *tmp;
    tmp = obj->que;
    obj->que = NULL;
    free(tmp);
}